// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model user_accounts {
  id Int @id @unique @default(autoincrement())
  username String @unique @db.VarChar(64)
  email String @unique @db.VarChar(255)
  password String
  created_at DateTime @default(now())

  categories categories[]
  // resume_revisions resume_revision[]
  // sessions user_sessions[]
  // images images[]
  user_profiles user_profile[]
  groups groups[]
}

model user_profile {
  id Int @id @unique @default(autoincrement())
  user_account user_accounts @relation(fields: [user_account_id], references: [id])
  user_account_id Int
  display_name String? @db.VarChar(255)
  location String? @db.VarChar(255)

  written articles[] @relation("ArticleWrittenBy")
  edited articles[] @relation("ArticleEditedBy")
  deleted articles[] @relation("ArticleDeletedBy")

  // profile_image images? @relation("ProfilePictureImg", fields: [profile_img_id], references: [id])
  profile_img_url String? @db.VarChar(255)
  // profile_banner images? @relation("ProfileBannerImg", fields: [profile_banner_id], references: [id])
  profile_banner_url String? @db.VarChar(255)
  resume_url String? @db.VarChar(255)
}

// model user_sessions {
//   id Int @id @default(autoincrement())
//   user_account user_accounts @relation(fields: [user_account_id], references: [id])
//   user_account_id Int
//   session_token String
//   expires_at DateTime
//   logged_in_at DateTime @default(now())
//   logged_out_at DateTime?

//   @@index([user_account_id, session_token])
// }

model articles {
  id Int @id @default(autoincrement())
  title String @db.VarChar(255)
  description String? @db.VarChar(255)
  url String? @db.VarChar(255)
  category categories? @relation(fields: [category_id], references: [id])
  category_id Int?
  created_at DateTime @default(now())
  author user_profile @relation("ArticleWrittenBy", fields: [created_by], references: [id])
  created_by Int
  edited_at DateTime @default(now())
  editor user_profile @relation("ArticleEditedBy", fields: [edited_by], references: [id])
  edited_by Int
  deleted_at DateTime?
  deleter user_profile? @relation("ArticleDeletedBy", fields: [deleted_by], references: [id])
  deleted_by Int?


  @@index([title, created_at])
}

// model resume_revision {
//   id Int @id @default(autoincrement())
//   user_account user_accounts @relation(fields: [created_by], references: [id])
//   created_by Int
//   created_at DateTime @default(now())
//   edited_at DateTime @default(now())
//   deleted_at DateTime?

//   cv resume?
// }

// model resume {
//   id Int @id @default(autoincrement())
//   cv_history resume_revision @relation(fields: [cv_history_id], references: [id])
//   cv_history_id Int

//   name String @db.VarChar(255)
//   email String @db.VarChar(255)
//   phone_number String @db.VarChar(255)

//   information resume_info[]
// }

// model resume_info {
//   id Int @id @default(autoincrement())
//   resume resume @relation(fields: [resume_id], references: [id])
//   resume_id Int
//   category categories @relation(fields: [category_id], references: [id])
//   category_id Int
//   title String @db.VarChar(255)
//   description String @db.VarChar(255)
//   content String

//   @@index([title])
// }

enum CategoryValType {
  bool
  int
  float
  string
}

model categories {
  id Int @id @default(autoincrement())
  key String @db.VarChar(255)
  value String @db.VarChar(255)
  type CategoryValType @default(int)
  group groups? @relation(fields: [group_id], references: [id])
  group_id Int?
  owner user_accounts @relation(fields: [created_by], references: [id])
  created_by Int
  created_at DateTime @default(now())
  edited_at DateTime @default(now())
  deleted_at DateTime?

  // images images[]
  // resume_info resume_info[]
  articles articles[]

  @@index([key])
}

model groups {
  id Int @id @default(autoincrement())
  name String @db.VarChar(255)
  group_owner user_accounts @relation(fields: [created_by], references: [id])
  created_by Int
  created_at DateTime @default(now())
  edited_at DateTime @default(now())
  deleted_at DateTime?

  categories categories[]

  @@index([name])
}

// model images {
//   id Int @id @default(autoincrement())
//   filename String @db.VarChar(255)
//   url String
//   users user_accounts @relation(fields: [uploaded_by], references: [id])
//   categories categories? @relation(fields: [category_id], references: [id])
//   category_id Int?
//   uploaded_by Int
//   uploaded_at DateTime @default(now())
//   deleted_at DateTime?

//   profile_picture user_profile[] @relation("ProfilePictureImg")
//   profile_banner user_profile[] @relation("ProfileBannerImg")

//   @@index([filename])
// }
